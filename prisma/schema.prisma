// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
  id           String @id @default(uuid())
  studentId    String
  firstName    String
  lastName     String
  middleName   String
  profileImage String
  email        String
  contactNo    String
  gender       String
  bloodGroup   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  semesterId       String
  academicSemester AcademicSemester @relation(fields: [semesterId], references: [id])

  facultyId       String
  academicFaculty AcademicFaculty @relation(fields: [facultyId], references: [id])

  departmentId       String
  academicDepartment AcademicDepartment @relation(fields: [departmentId], references: [id])

  @@map("students")
}

model Faculty {
  id           String @id @default(uuid())
  firstName    String
  lastName     String
  meddleName   String
  profileImage String
  email        String
  contactNo    String
  gender       String
  bloodGroup   String
  designation  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  facultyId       String
  academicFaculty AcademicFaculty @relation(fields: [facultyId], references: [id])

  departmentId       String
  academicDepartment AcademicDepartment @relation(fields: [departmentId], references: [id])
  faculties          CourseFaculty[]

  @@map("faculty")
}

model AcademicSemester {
  id                    String                 @id @default(uuid())
  year                  Int
  title                 String
  code                  String
  startMonth            String
  endMonth              String
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  students              Student[]
  semesterRagintrations SemesterRegistration[]

  @@map("academic_semester")
}

model AcademicFaculty {
  id                  String               @id @default(uuid())
  title               String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  academicDepartments AcademicDepartment[]
  students            Student[]
  faculties           Faculty[]

  @@map("academic_faculty")
}

model AcademicDepartment {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  academicFacultyId String
  academicFaculty   AcademicFaculty @relation(fields: [academicFacultyId], references: [id])
  students          Student[]
  faculties         Faculty[]

  @@map("academic_departments")
}

model Building {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  rooms Room[]
}

model Room {
  id         String   @id @default(uuid())
  roomNumber String
  floor      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  buildingId String
  Building   Building @relation(fields: [buildingId], references: [id])
}

model Course {
  id        String   @id @default(uuid())
  title     String
  code      String
  credits   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  preRequisite    CourseToPrereqisite[] @relation("preRequisiteCourse")
  preRequisiteFor CourseToPrereqisite[] @relation("preRequisiteForUpComing")
  faculties       CourseFaculty[]

  @@map("courses")
}

model CourseToPrereqisite {
  courseId String
  course   Course @relation(fields: [courseId], references: [id], name: "preRequisiteCourse")

  preRequisiteId    String
  preRequisitCourse Course @relation(fields: [preRequisiteId], references: [id], name: "preRequisiteForUpComing")

  @@id([courseId, preRequisiteId])
}

model CourseFaculty {
  courseId String
  course   Course @relation(fields: [courseId], references: [id])

  facultyId String
  faculty   Faculty @relation(fields: [facultyId], references: [id])

  @@id([courseId, facultyId])
  @@map("courseFaculty")
}

model SemesterRegistration {
  id String @id @default(uuid())

  startDate DateTime
  endDate   DateTime
  status    semesterRegistrationStatus? @default(UPCOMING)
  minCredit Int                         @default(0)
  maxCredit Int                         @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  academicSemesterId String
  academicSemester   AcademicSemester @relation(fields: [academicSemesterId], references: [id])

  @@map("semesterRegintration")
}

// enum type for semester registration ðŸ§©
enum semesterRegistrationStatus {
  UPCOMING
  ONGOING
  ENDED
}
