// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
  id           String @id @default(uuid())
  studentId    String
  firstName    String
  lastName     String
  middleName   String
  profileImage String
  email        String
  contactNo    String
  gender       String
  bloodGroup   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  semesterId       String
  academicSemester AcademicSemester @relation(fields: [semesterId], references: [id])

  facultyId       String
  academicFaculty AcademicFaculty @relation(fields: [facultyId], references: [id])

  departmentId       String
  academicDepartment AcademicDepartment @relation(fields: [departmentId], references: [id])

  @@map("students")
}

model Faculty {
  id           String @id @default(uuid())
  firstName    String
  lastName     String
  meddleName   String
  profileImage String
  email        String
  contactNo    String
  gender       String
  bloodGroup   String
  designation  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  facultyId       String
  academicFaculty AcademicFaculty @relation(fields: [facultyId], references: [id])

  departmentId                String
  academicDepartment          AcademicDepartment           @relation(fields: [departmentId], references: [id])
  faculties                   CourseFaculty[]
  offeredCourseClassSchedules OfferedCourseClassSchedule[]

  @@map("faculty")
}

model AcademicSemester {
  id                    String                 @id @default(uuid())
  year                  Int
  title                 String
  code                  String
  startMonth            String
  endMonth              String
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  students              Student[]
  semesterRagintrations SemesterRegistration[]

  @@map("academic_semester")
}

model AcademicFaculty {
  id                  String               @id @default(uuid())
  title               String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  academicDepartments AcademicDepartment[]
  students            Student[]
  faculties           Faculty[]

  @@map("academic_faculty")
}

model AcademicDepartment {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  academicFacultyId String
  academicFaculty   AcademicFaculty @relation(fields: [academicFacultyId], references: [id])
  students          Student[]
  faculties         Faculty[]
  offeredCourses    OfferedCourse[]

  @@map("academic_departments")
}

model Building {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  rooms Room[]
}

model Room {
  id         String   @id @default(uuid())
  roomNumber String
  floor      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  buildingId                  String
  Building                    Building                     @relation(fields: [buildingId], references: [id])
  offeredCourseClassSchedules OfferedCourseClassSchedule[]
}

model Course {
  id        String   @id @default(uuid())
  title     String
  code      String
  credits   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  preRequisite    CourseToPrereqisite[] @relation("preRequisiteCourse")
  preRequisiteFor CourseToPrereqisite[] @relation("preRequisiteForUpComing")
  faculties       CourseFaculty[]
  offeredCourses  OfferedCourse[]

  @@map("courses")
}

model CourseToPrereqisite {
  courseId String
  course   Course @relation(fields: [courseId], references: [id], name: "preRequisiteCourse")

  preRequisiteId    String
  preRequisitCourse Course @relation(fields: [preRequisiteId], references: [id], name: "preRequisiteForUpComing")

  @@id([courseId, preRequisiteId])
}

model CourseFaculty {
  courseId String
  course   Course @relation(fields: [courseId], references: [id])

  facultyId String
  faculty   Faculty @relation(fields: [facultyId], references: [id])

  @@id([courseId, facultyId])
  @@map("courseFaculty")
}

model SemesterRegistration {
  id String @id @default(uuid())

  startDate DateTime
  endDate   DateTime
  status    semesterRegistrationStatus? @default(UPCOMING)
  minCredit Int                         @default(0)
  maxCredit Int                         @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  academicSemesterId          String
  academicSemester            AcademicSemester             @relation(fields: [academicSemesterId], references: [id])
  offeredCourses              OfferedCourse[]
  offeredCourseSections       OfferedCourseSection[]
  offeredCourseClassSchedules OfferedCourseClassSchedule[]

  @@map("semesterRegintration")
}

model OfferedCourse {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courseId String
  course   Course @relation(fields: [courseId], references: [id])

  academicDepartmentId String
  academicDepartment   AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])

  semesterRegistrationId String
  semesterRegistration   SemesterRegistration   @relation(fields: [semesterRegistrationId], references: [id])
  offeredCourseSections  OfferedCourseSection[]
}

model OfferedCourseSection {
  id                       String   @id @default(uuid())
  title                    String
  maxCapacity              Int
  currentlyEnrolledStudent Int      @default(0)
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  offeredCourseId String
  offeredCourse   OfferedCourse @relation(fields: [offeredCourseId], references: [id])

  semseterRegistrationId      String
  semseterRegistration        SemesterRegistration         @relation(fields: [semseterRegistrationId], references: [id])
  offeredCourseClassSchedules OfferedCourseClassSchedule[]
}

model OfferedCourseClassSchedule {
  id String @id @default(uuid())

  startTime String
  endTime   String

  dayOfWeek weekDays @default(SATURDAY)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  offeredCourseSectionId String
  offeredCourseSection   OfferedCourseSection @relation(fields: [offeredCourseSectionId], references: [id])

  semesterRegistrationId String
  semesterRegistration   SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])

  roomId String
  room   Room   @relation(fields: [roomId], references: [id])

  facultyId String
  faculty   Faculty @relation(fields: [facultyId], references: [id])

  @@map("offered_course_class_schedule")
}

// enum type for semester registration ðŸ§©
enum semesterRegistrationStatus {
  UPCOMING
  ONGOING
  ENDED
}

enum weekDays {
  SATURDAY
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}
